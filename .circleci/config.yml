# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.1.2
  helm: circleci/helm@1.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:17.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: ./gradlew build
      # Then run your tests!
      - run:
          name: Test
          command: ./gradlew test
      - save_cache:
          key: backend-0.0.1-SNAPSHOT.jar
          paths:
            - target/backend-0.0.1-SNAPSHOT.jar
      - store_artifacts:
          path: target/backend-0.0.1-SNAPSHOT.jar
          destination: target/backend-0.0.1-SNAPSHOT.jar
  aws-job:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - restore_cache:
          keys:
            - backend-0.0.1-SNAPSHOT.jar

      # run the aws-cli/setup command from the orb
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}'
          aws-region: AWS_DEFAULT_REGION
          # optional parameters
          profile-name: CircleCIRole
          role-session-name: CircleSession
          session-duration: '1800'
      - run:
          name: Log-into-AWS-ECR
          command: |
            # must use same profile specified in the step above       
            aws ecr get-login-password --profile ${AWS_ROLE}
  build-and-push:
    docker:
      - image: cimg/openjdk:17.0.7
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Set environment variables
          command: |
            echo 'export IMAGE_VERSION=$(cat ./build.gradle | grep "version =" | sed "s/version = '\''\([^'\'']*\)'\''/\1/")' >> $BASH_ENV
            echo 'export ECR_REGISTRY=app/usct/dev-backend' >> $BASH_ENV
            echo 'export DOCKER_IMAGE=${ECR_REGISTRY}:${IMAGE_VERSION}' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Build Docker image
          command: |
            ./gradlew bootBuildImage --imageName=${DOCKER_IMAGE}
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/${AWS_ROLE}'
          aws-region: AWS_DEFAULT_REGION
          profile-name: ${AWS_ROLE}
          role-session-name: CircleSession
          session-duration: '1800'
      - run:
          name: Docker login
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 463471358064.dkr.ecr.eu-central-1.amazonaws.com
            docker tag ${DOCKER_IMAGE} 463471358064.dkr.ecr.eu-central-1.amazonaws.com/${DOCKER_IMAGE}
            docker push 463471358064.dkr.ecr.eu-central-1.amazonaws.com/${DOCKER_IMAGE}

  deploy-project:
    docker:
      - image: cimg/aws:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}'
          aws-region: AWS_DEFAULT_REGION
          # optional parameters
          profile-name: CircleCIRole
          role-session-name: CircleSession
          session-duration: '1800'
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${AWS_CLUSTER_NAME}
          cluster-authentication-role-arn: arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}
      - helm/install-helm-client:
          version: v3.2.0
      - run:
          name: Update usct
          command: |
            helm dependency update ./helm
            helm upgrade --install usct ./helm --create-namespace --namespace ${CHART_NAMESPACE}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  Build project and publish to ECR : # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - hold:
          type: approval
      - build-and-test
      - build-and-push:
          context: aws
  Deploy project to DEV environment:
    jobs:
      - hold:
          type: approval
      - deploy-project:
          context: aws
          requires:
            - hold
