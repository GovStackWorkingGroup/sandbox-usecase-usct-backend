version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.1.2
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-digital-registries:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - helm/install-helm-client:
          version: v3.2.0
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CircleCIRole'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CircleCIRole
          role-session-name: CircleSession
          session-duration: '1800' 
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "${AWS_CLUSTER_NAME}"
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Debug
          command: aws sts get-caller-identity
      - run:
          name: Update kubectl
          command: |
            aws eks update-kubeconfig --region "${AWS_DEFAULT_REGION}" --name "${AWS_CLUSTER_NAME}" --role-arn arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Install secrets for Digital Registries BB
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"
            export SECRETS_ENABLED="${GENERATE_NEW_SECRETS}"
            export GDB_ENABLED="${GDB_ENABLED}"
            export DB_ENABLED="false"
            export APPLICATION_ENABLED="false"
            cp ./digital-registries/values.yaml val.yaml
            sed -i 's/${NAMESPACE}/'"$NAMESPACE"'/g' val.yaml
            sed -i 's/${DB_ENABLED}/'"$DB_ENABLED"'/g' val.yaml
            sed -i 's/${SECRETS_ENABLED}/'"$SECRETS_ENABLED"'/g' val.yaml
            sed -i 's/${APPLICATION_ENABLED}/'"$APPLICATION_ENABLED"'/g' val.yaml
            sed -i 's/${GDB_ENABLED}/'"$GDB_ENABLED"'/g' val.yaml
            helm upgrade --install digital-registries ./digital-registries/ -f val.yaml
      - run:
          name: Install db for Digital Registries BB
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"
            export GDB_ENABLED="${GDB_ENABLED}"
            export PGDATA_FOLDER="${PGDATA}"
            export PGDATA=$(echo ${PGDATA_FOLDER//\//\\/})
            export DB_ENABLED="true"
            export SECRETS_ENABLED="false"
            export APPLICATION_ENABLED="false"
            cp ./digital-registries/values.yaml val.yaml
            sed -i 's/${NAMESPACE}/'"$NAMESPACE"'/g' val.yaml
            sed -i 's/${PGDATA}/'"$PGDATA"'/g' val.yaml
            sed -i 's/${DB_ENABLED}/'"$DB_ENABLED"'/g' val.yaml
            sed -i 's/${SECRETS_ENABLED}/'"$SECRETS_ENABLED"'/g' val.yaml
            sed -i 's/${APPLICATION_ENABLED}/'"$APPLICATION_ENABLED"'/g' val.yaml
            sed -i 's/${GDB_ENABLED}/'"$GDB_ENABLED"'/g' val.yaml
                        
            helm upgrade --install digital-registries ./digital-registries/ -f val.yaml           
      - run:
          name: Configure db for Digital Registries BB
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"  
            export POSTGRES_USER="${POSTGRES_USER}"
            export ADMIN_PASS=$(kubectl get secret govstack-gdb-postgres-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            kubectl exec -it service/govstack-gdb-postgres -n $NAMESPACE -- psql -h localhost -U $POSTGRES_USER -c "ALTER USER ${POSTGRES_USER} WITH PASSWORD '${ADMIN_PASS}'"
      - run:
          name: Install Digital Registries BB
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"
            export PGDATA_FOLDER="${PGDATA}"
            export PGDATA=$(echo ${PGDATA_FOLDER//\//\\/})
            export SECRETS_ENABLED="false"
            export GDB_ENABLED="${GDB_ENABLED}"
            export DB_ENABLED="true"
            export APPLICATION_ENABLED="true"
            export ENV="live"
            export ECR_GDB_REPO_NAME="463471358064.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\/${AWS_ECR_REPO_NAME_PREFIX}\/${AWS_ECR_GDB_REPO_NAME}"
            export DATABASE_HOST=$(kubectl get service govstack-gdb-postgres -o jsonpath='{.spec.clusterIP}' -n $NAMESPACE)
            export DATABASE_NAME="gdb"           
            export DATABASE_USERNAME="gdb"
            export DATABASE_PASSWORD=$(kubectl get secret govstack-gdb-postgres-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export REDIS_HOST=$(kubectl get service govstack-gdb-redis -o jsonpath='{.spec.clusterIP}' --namespace $NAMESPACE)
            export ALLOWED_HOSTS="gdb,172.19.0.2"
            export CORS_ORIGIN_WHITELIST="localhost"
            export AUTH_SERVICE_TYPE_1="KEYCLOAK"      
            export AUTH_SERVICE_REALM_1="gdb"
            export AUTH_SERVICE_BACKEND_URL_1="http:\/\/keycloak:8080"
            export AUTH_SERVICE_PUBLIC_URL_1="https:\/\/login.gdb"
            export AUTH_SERVICE_ID_1="0"
            export AUTH_SERVICE_NAME_1="gdb-auth"
            export AUTH_SERVICE_CLIENT_ID_1="gdb-client"
            export AUTH_SERVICE_CLIENT_SECRET_1="changeme"
            export AUTH_SERVICE_CLIENT_SCOPE_1="openid email profile"
            export TRANSLATION_SERVICE_URL="https:\/\/translations.test.eregistrations.org"
            export AUTH_SERVICE_CLIENT_CALLBACK="login\/callback"
            export LANGUAGES="en"
            export DEMAND_AUTHORIZATION_HEADER="true"
            export UPLOAD_FILE_SIZE_LIMIT="26214400"
            export APP_TITLE="gdb"
           
            cp ./digital-registries/values.yaml val.yaml
            sed -i 's/${NAMESPACE}/'"$NAMESPACE"'/g' val.yaml
            sed -i 's/${ENV}/'"$ENV"'/g' val.yaml
            sed -i 's/${PGDATA}/'"$PGDATA"'/g' val.yaml
            sed -i 's/${DATABASE_ENABLED}/'"$DB_ENABLED"'/g' val.yaml
            sed -i 's/${SECRETS_ENABLED}/'"$SECRETS_ENABLED"'/g' val.yaml
            sed -i 's/${APPLICATION_ENABLED}/'"$APPLICATION_ENABLED"'/g' val.yaml
            sed -i 's/${GDB_ENABLED}/'"$GDB_ENABLED"'/g' val.yaml
            sed -i 's/${ECR_GDB_REPO}/'"$ECR_GDB_REPO_NAME"'/g' val.yaml
            sed -i 's/${DATABASE_HOST}/'"$DATABASE_HOST"'/g' val.yaml
            sed -i 's/${DATABASE_NAME}/'"$DATABASE_NAME"'/g' val.yaml
            sed -i 's/${DATABASE_USERNAME}/'"$DATABASE_USERNAME"'/g' val.yaml
            sed -i 's/${DATABASE_PASSWORD}/'"$DATABASE_PASSWORD"'/g' val.yaml
            sed -i 's/${REDIS_HOST}/'"$REDIS_HOST"'/g' val.yaml
            sed -i 's/${ALLOWED_HOSTS}/'"$ALLOWED_HOSTS"'/g' val.yaml
            sed -i 's/${CORS_ORIGIN_WHITELIST}/'"$CORS_ORIGIN_WHITELIST"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_TYPE_1}/'"$AUTH_SERVICE_TYPE_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_REALM_1}/'"$AUTH_SERVICE_REALM_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_BACKEND_URL_1}/'"$AUTH_SERVICE_BACKEND_URL_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_PUBLIC_URL_1}/'"$AUTH_SERVICE_PUBLIC_URL_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_ID_1}/'"$AUTH_SERVICE_ID_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_NAME_1}/'"$AUTH_SERVICE_NAME_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_CLIENT_ID_1}/'"$AUTH_SERVICE_CLIENT_ID_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_CLIENT_SECRET_1}/'"$AUTH_SERVICE_CLIENT_SECRET_1"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_CLIENT_SCOPE_1}/'"$AUTH_SERVICE_CLIENT_SCOPE_1"'/g' val.yaml
            sed -i 's/${TRANSLATION_SERVICE_URL}/'"$TRANSLATION_SERVICE_URL"'/g' val.yaml
            sed -i 's/${AUTH_SERVICE_CLIENT_CALLBACK}/'"$AUTH_SERVICE_CLIENT_CALLBACK"'/g' val.yaml
            sed -i 's/${LANGUAGES}/'"$LANGUAGES"'/g' val.yaml
            sed -i 's/${DEMAND_AUTHORIZATION_HEADER}/'"$DEMAND_AUTHORIZATION_HEADER"'/g' val.yaml
            sed -i 's/${UPLOAD_FILE_SIZE_LIMIT}/'"$UPLOAD_FILE_SIZE_LIMIT"'/g' val.yaml
            sed -i 's/${APP_TITLE}/'"$APP_TITLE"'/g' val.yaml
            
            helm upgrade --install digital-registries ./digital-registries/ -f val.yaml 
      - run:
          name: Delete temporary values file
          command: |
            rm val.yaml                 
workflows:
  Deploy Digital Registries BB to EKS cluster:
    jobs:
      - hold:
          type: approval
      - deploy-digital-registries:
          context: aws
          requires: 
            - hold