### Global Values if any ###
global:
  name: rapidpro

### Sub Charts Specific Values ###
rapidpro:
  enabled: true
  name: "rapidpro"
  template:
    labels: 
      app: "rapidpro"
  containers:
    name: "rapidpro"
    image: oleksiidn/rapidpro:csrf-hard-2
    imagePullPolicy: "IfNotPresent"
    databaseUrl: "postgresql://postgres:postgres@postgresql/rapidpro"
    redisUrl: "redis://redis:6379/0"
  profiles: "container"
  service:
    name: rapidpro
    type: ClusterIP
    port: 8000
    targetPort: 8000

mailroom:
  enabled: true
  name: "mailroom"
  template:
    labels:
      app: "mailroom"
  containers:
    name: "mailroom"
    image: oleksiidn/mailroom:1
    imagePullPolicy: "IfNotPresent"
    databaseUrl: "postgresql://postgres:postgres@postgresql/rapidpro"
    redisUrl: "redis://redis:6379/0"
  profiles: "container"
  service:
    name: mailroom
    type: ClusterIP
    port: 8090
    targetPort: 8090
postgresql:    
  name: "postgres"
  replicaCount: 1
  template:
    labels:
      app: "postgres"
  containers:
    name: "postgres"
    image: ghcr.io/baosystems/postgis:15-3.3
    imagePullPolicy: "IfNotPresent"
  statefulset:
    name: postgres
    username: "temba"
    password: "temba"
    databaseName: "temba"
    postgresPassword: "tembatemba"
    spec:
      mountPath: /var/lib/pgsql/data
      storage: 1Gi
  service:
    name: postgres
    type: ClusterIP
    port: 5432
    selector:
      app: postgres
    
redis:
  name: "redis"
  replicaCount: 1
  template:
    labels:
      app: "redis"
  containers:
    name: "redis"
    image: redis:6.2-alpine
    imagePullPolicy: "IfNotPresent"
  statefulset:
    name: redis
    spec:
      mountPath: /rapidpro/media/
      storage: 1Gi
  service:
    name: "redis"
    type: ClusterIP
    port: 6379

minio:
  clusterDomain: localhost
  resources:
    requests:
      memory: 512Mi
  replicas: 1
  mode: standalone
  rootUser: rootuser
  rootPassword: rootpass123
  environment:
    MINIO_DOMAIN: "rapidpro-minio"

  buckets:
    - name: temba-sessions
      # Policy to be set on the
      # bucket [none|download|upload|public]
      policy: public
      # Purge if bucket exists already
      purge: false
      # set versioning for
      # bucket [true|false]
      versioning: false # remove this key if you do not want versioning feature
      # set objectlocking for
      # bucket [true|false] NOTE: versioning is enabled by default if you use locking
      objectlocking: false
    - name: temba-attachments
      policy: public
      purge: false
      versioning: false # remove this key if you do not want versioning feature
      objectlocking: false
    - name: temba-logs
      policy: public
      purge: false
      versioning: false # remove this key if you do not want versioning feature
      objectlocking: false