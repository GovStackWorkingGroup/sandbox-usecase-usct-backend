# Copyright Baserow B.V. All Rights Reserved.

## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters, serviceAccount, backendConfigMap, backendSecret, frontendConfigMap, envFrom, domain, backendDomain.
##

## @param global.baserow.imageRegistry Global Docker image registry
## @param global.baserow.imagePullSecrets Global Docker registry secret names as an array
## @param global.baserow.image.tag Global Docker image tag
## @param global.baserow.serviceAccount.shared Set to true to share the service account between all application components.
## @param global.baserow.serviceAccount.create Set to true to create a service account to share between all application components.
## @param global.baserow.serviceAccount.name Configure a name for service account to share between all application components.
## @param global.baserow.serviceAccount.annotations Configure annotations for the shared service account.
## @param global.baserow.serviceAccount.automountServiceAccountToken Automount the service account token to the pods.
## @param global.baserow.backendConfigMap Configure a name for the backend configmap.
## @param global.baserow.backendSecret Configure a name for the backend secret.
## @param global.baserow.frontendConfigMap Configure a name for the frontend configmap.
## @param global.baserow.sharedConfigMap Configure a name for the shared configmap.
## @param global.baserow.envFrom Configure secrets or configMaps to be used as environment variables for all components.
## @param global.baserow.domain Configure the domain for the frontend application.
## @param global.baserow.backendDomain Configure the domain for the backend application.
## @param global.baserow.objectsDomain Configure the domain for the external facing minio api.
##
global:
  baserow:
    imageRegistry: baserow
    image:
      tag: 1.26.1
    imagePullSecrets: []
    serviceAccount:
      shared: true
      create: true
      name: baserow
      annotations: {}
      automountServiceAccountToken: false
    sharedConfigMap: shared-config
    backendConfigMap: backend-config
    backendSecret: backend-secret
    frontendConfigMap: frontend-config
    envFrom: []
    domain: localhost:3000
    backendDomain: localhost:8000
    objectsDomain: objects.cluster.local

## @section Baserow Configuration
## Configuration for the Baserow application
## @param generateJwtSecret Generate a new JWT secret
generateJwtSecret: true

## @section Shared ConfigMap Configuration
## Configuration for the shared ConfigMap
## @param sharedConfigMap Additional configuration for the shared ConfigMap, key value map.
sharedConfigMap: {}

## @section Frontend ConfigMap Configuration
## Configuration for the Frontend ConfigMap
## @param frontendConfigMap.DOWNLOAD_FILE_VIA_XHR Set to "1" to download files via XHR
frontendConfigMap:
  DOWNLOAD_FILE_VIA_XHR: "1"
# frontendConfigMap:
#   ADDITIONAL_MODULES: ""
#   BASEROW_DISABLE_PUBLIC_URL_CHECK: "yes"
#   BASEROW_DISABLE_GOOGLE_DOCS_FILE_PREVIEW: ""
#   DOWNLOAD_FILE_VIA_XHR: "1"
#   BASEROW_MAX_IMPORT_FILE_SIZE_MB: "512"
#   BASEROW_MAX_SNAPSHOTS_PER_GROUP: "-1"

## @section backend Secrets Configuration
## Configuration for the backend Secrets
## @param backendSecrets Additional configuration for the backend Secrets, key value map.
backendSecrets: {}

## @section backend ConfigMap Configuration
## Configuration for the backend ConfigMap
## @param backendConfigMap.DONT_UPDATE_FORMULAS_AFTER_MIGRATION Set to "yes" to disable updating formulas after migration
## @param backendConfigMap.SYNC_TEMPLATES_ON_STARTUP Set to "false" to disable syncing templates on startup
## @param backendConfigMap.MIGRATE_ON_STARTUP Set to "false" to disable migration on startup
## @param backendConfigMap.BASEROW_TRIGGER_SYNC_TEMPLATES_AFTER_MIGRATION Set to "true" to trigger syncing templates after migration
backendConfigMap:
  DONT_UPDATE_FORMULAS_AFTER_MIGRATION: "yes"
  SYNC_TEMPLATES_ON_STARTUP: "false"
  MIGRATE_ON_STARTUP: "false"
  BASEROW_TRIGGER_SYNC_TEMPLATES_AFTER_MIGRATION: "true"
# backendConfigMap:
#   BASEROW_AMOUNT_OF_GUNICORN_WORKERS: "5"
#   BASEROW_BACKEND_LOG_LEVEL: DEBUG
#   BASEROW_COUNT_ROWS_ENABLED: "true"
#   BASEROW_DEFAULT_SEARCH_MODE: full-text-with-count
#   BASEROW_ENABLE_OTEL: "false"
#   BASEROW_EXTRA_ALLOWED_HOSTS: "*"
#   BASEROW_FILE_UPLOAD_SIZE_LIMIT_MB: "20"
#   BASEROW_GROUP_STORAGE_USAGE_ENABLED: "true"
#   DONT_UPDATE_FORMULAS_AFTER_MIGRATION: "yes"
#   ENABLE_SECURE_PROXY_SSL_HEADER: "yes"
#   MAILGUN_SENDER_DOMAIN: mail.mydomain.com
#   MIGRATE_ON_STARTUP: "false"
#   SYNC_TEMPLATES_ON_STARTUP: "false"

## @section Migration Job Configuration
## Configuration for the database migration job
## This job ensures that the database schema is up-to-date before the application starts

## @param migration.enabled Enabled the migration job
## @param migration.image.repository Migration job Docker image repository
## @param migration.priorityClassName Kubernetes priority class name for the migration job
## @param migration.nodeSelector Node labels for pod assignment
## @param migration.tolerations Tolerations for pod assignment
## @param migration.affinity Affinity settings for pod assignment
## @param migration.extraEnv Extra environment variables for the migration job
## @param migration.envFrom ConfigMaps or Secrets to be used as environment variables
## @param migration.volumes Volumes for the migration job
## @param migration.volumeMounts Volume mounts for the migration job
migration:
  enabled: true
  image:
    repository: backend
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: []
  extraEnv: []
  envFrom: []
  volumes: []
  volumeMounts: []

## @section Baserow Backend ASGI Configuration
## Configuration for the ASGI server that serves the Baserow backend application.
## This section includes the Docker image repository and arguments for running the ASGI server,
## as well as liveness and readiness probes to ensure the service is operating correctly.

## Docker Image Configuration
## @param baserow-backend-asgi.image.repository Docker image repository for the ASGI server.
## This specifies the location of the Docker image used to run the Baserow backend ASGI server.

## ASGI Server Arguments
## @param baserow-backend-asgi.args Arguments passed to the ASGI server.
## This typically includes the command to start the server, such as "gunicorn" for a Gunicorn-based ASGI server.

## Liveness Probe Configuration
## Ensures the ASGI server is alive and can handle requests. If the liveness probe fails, Kubernetes restarts the container.
## @param baserow-backend-asgi.livenessProbe.exec.command The command used to check the liveness of the ASGI server.
## @param baserow-backend-asgi.livenessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-backend-asgi.livenessProbe.initialDelaySeconds Delay before the liveness probe is initiated after the container starts.
## @param baserow-backend-asgi.livenessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-backend-asgi.livenessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-backend-asgi.livenessProbe.timeoutSeconds Number of seconds after which the probe times out.

## Readiness Probe Configuration
## Ensures the ASGI server is alive and can handle requests. If the readiness probe fails, new deployments are halted.
## @param baserow-backend-asgi.readinessProbe.exec.command The command used to check the readiness of the ASGI server.
## @param baserow-backend-asgi.readinessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-backend-asgi.readinessProbe.initialDelaySeconds Delay before the readiness probe is initiated after the container starts.
## @param baserow-backend-asgi.readinessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-backend-asgi.readinessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-backend-asgi.readinessProbe.timeoutSeconds Number of seconds after which the probe times out.
baserow-backend-asgi:
  image:
    repository: backend
  args:
    - "gunicorn"
  livenessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - /baserow/backend/docker/docker-entrypoint.sh backend-healthcheck
    failureThreshold: 3
    initialDelaySeconds: 120
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5

  readinessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - /baserow/backend/docker/docker-entrypoint.sh backend-healthcheck
    failureThreshold: 3
    initialDelaySeconds: 120
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5

## @section Baserow Backend WSGI Configuration
## Configuration for the WSGI server that serves the Baserow backend application.
## This section includes the Docker image repository and arguments for running the WSGI server,
## as well as liveness and readiness probes to ensure the service is operating correctly.

## Docker Image Configuration
## @param baserow-backend-wsgi.image.repository Docker image repository for the WSGI server.
## This specifies the location of the Docker image used to run the Baserow backend WSGI server.

## WSGI Server Arguments
## @param baserow-backend-wsgi.args Arguments passed to the WSGI server.
## This typically includes the command to start the server, such as "gunicorn" for a Gunicorn-based WSGI server.

## Liveness Probe Configuration
## Ensures the WSGI server is alive and can handle requests. If the liveness probe fails, Kubernetes restarts the container.
## @param baserow-backend-wsgi.livenessProbe.exec.command The command used to check the liveness of the WSGI server.
## @param baserow-backend-wsgi.livenessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-backend-wsgi.livenessProbe.initialDelaySeconds Delay before the liveness probe is initiated after the container starts.
## @param baserow-backend-wsgi.livenessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-backend-wsgi.livenessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-backend-wsgi.livenessProbe.timeoutSeconds Number of seconds after which the probe times out.

## Readiness Probe Configuration
## Ensures the wsgi server is alive and can handle requests. If the readiness probe fails, new deployments are halted.
## @param baserow-backend-wsgi.readinessProbe.exec.command The command used to check the readiness of the wsgi server.
## @param baserow-backend-wsgi.readinessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-backend-wsgi.readinessProbe.initialDelaySeconds Delay before the readiness probe is initiated after the container starts.
## @param baserow-backend-wsgi.readinessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-backend-wsgi.readinessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-backend-wsgi.readinessProbe.timeoutSeconds Number of seconds after which the probe times out.
baserow-backend-wsgi:
  image:
    repository: backend
  args:
    - gunicorn-wsgi
    - "--timeout"
    - "120"
  livenessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - /baserow/backend/docker/docker-entrypoint.sh backend-healthcheck
    failureThreshold: 3
    initialDelaySeconds: 120
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5

  readinessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - /baserow/backend/docker/docker-entrypoint.sh backend-healthcheck
    failureThreshold: 3
    initialDelaySeconds: 120
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5

## @section Baserow Web Frontend Configuration
## Configuration for the Web Frontend server that serves the Baserow backend application.
## This section includes the Docker image repository and arguments for running the Web Frontend server,
## as well as liveness and readiness probes to ensure the service is operating correctly.

## Docker Image Configuration
## @param baserow-frontend.image.repository Docker image repository for the Web Frontend server.
## This specifies the location of the Docker image used to run the Baserow Web Frontend server.

## Web Frontend Server Arguments
## @param baserow-frontend.args Arguments passed to the Web Frontend server.
## This typically includes the command to start the server, such as "nuxt".

## Web Frontend Server Working Directory
## @param baserow-frontend.workingDir Working Directory for the container.
## This should be empty for the Web Frontend Server.

## Liveness Probe Configuration
## Ensures the Web Frontend server is alive and can handle requests. If the liveness probe fails, Kubernetes restarts the container.
## @param baserow-frontend.livenessProbe.httpGet.path The path to check for the liveness probe.
## @param baserow-frontend.livenessProbe.httpGet.port The port to check for the liveness probe.
## @param baserow-frontend.livenessProbe.httpGet.scheme The scheme to use for the liveness probe.
## @param baserow-frontend.livenessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-frontend.livenessProbe.initialDelaySeconds Delay before the liveness probe is initiated after the container starts.
## @param baserow-frontend.livenessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-frontend.livenessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-frontend.livenessProbe.timeoutSeconds Number of seconds after which the probe times out.

## Readiness Probe Configuration
## Ensures the wsgi server is alive and can handle requests. If the readiness probe fails, new deployments are halted.
## @param baserow-frontend.readinessProbe.httpGet.path The path to check for the readiness probe.
## @param baserow-frontend.readinessProbe.httpGet.port The port to check for the readiness probe.
## @param baserow-frontend.readinessProbe.httpGet.scheme The scheme to use for the readiness probe.
## @param baserow-frontend.readinessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-frontend.readinessProbe.initialDelaySeconds Delay before the readiness probe is initiated after the container starts.
## @param baserow-frontend.readinessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-frontend.readinessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-frontend.readinessProbe.timeoutSeconds Number of seconds after which the probe times out.

## Mount Configuration Configuration
## Determines which configurations the Web Frontend server should mount.
## @param baserow-frontend.mountConfiguration.backend If enabled, all the backend service configurations and secrets will be mounted.
## @param baserow-frontend.mountConfiguration.frontend If enabled, all the frontend service configurations and secrets will be mounted.
## @param baserow-frontend.service.targetPort The port the Web Frontend server listens on.
baserow-frontend:
  image:
    repository: web-frontend
  workingDir: ""
  args:
    - nuxt
  mountConfiguration:
    backend: false
    frontend: true
  service:
    targetPort: 3000

  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /_health
      port: 3000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /_health
      port: 3000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5

## @section Baserow Celery beat Configuration
## Configuration for the Celery beat workers that process background tasks for the Baserow application.
## This section includes the Docker image repository and arguments for running the Celery beat workers,
## @param baserow-celery-beat-worker.image.repository Docker image repository for the Celery beat worker.
## @param baserow-celery-beat-worker.args Arguments passed to the Celery beat worker.
## @param baserow-celery-beat-worker.service.create Set to false to disable creating a service for the Celery beat worker.
baserow-celery-beat-worker:
  image:
    repository: backend
  args:
    - celery-beat
  service:
    create: false

## @section Baserow Celery export worker Configuration
## Configuration for the Celery export worker that process background tasks for the Baserow application.
## This section includes the Docker image repository and arguments for running the Celery export worker,
## @param baserow-celery-export-worker.image.repository Docker image repository for the Celery export worker.
## @param baserow-celery-export-worker.args Arguments passed to the Celery export worker.
## @param baserow-celery-export-worker.service.create Set to false to disable creating a service for the Celery beat worker.
baserow-celery-export-worker:
  image:
    repository: backend
  args:
    - celery-exportworker
  service:
    create: false

## @section Baserow Celery worker Configuration
## Configuration for the Celery worker that process background tasks for the Baserow application.
## This section includes the Docker image repository and arguments for running the Celery worker,
## @param baserow-celery-worker.image.repository Docker image repository for the Celery worker.
## @param baserow-celery-worker.args Arguments passed to the Celery worker.
## @param baserow-celery-worker.service.create Set to false to disable creating a service for the Celery beat worker.
## Liveness Probe Configuration
## Ensures the Celery worker is alive and can handle requests. If the liveness probe fails, Kubernetes restarts the container.
## @param baserow-celery-worker.livenessProbe.exec.command The command used to check the liveness of the WSGI server.
## @param baserow-celery-worker.livenessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-celery-worker.livenessProbe.initialDelaySeconds Delay before the liveness probe is initiated after the container starts.
## @param baserow-celery-worker.livenessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-celery-worker.livenessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-celery-worker.livenessProbe.timeoutSeconds Number of seconds after which the probe times out.

## Readiness Probe Configuration
## Ensures the wsgi server is alive and can handle requests. If the readiness probe fails, new deployments are halted.
## @param baserow-celery-worker.readinessProbe.exec.command The command used to check the readiness of the wsgi server.
## @param baserow-celery-worker.readinessProbe.failureThreshold Number of times the probe can fail before the container is restarted.
## @param baserow-celery-worker.readinessProbe.initialDelaySeconds Delay before the readiness probe is initiated after the container starts.
## @param baserow-celery-worker.readinessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param baserow-celery-worker.readinessProbe.successThreshold Minimum consecutive successes for the probe to be considered successful after having failed.
## @param baserow-celery-worker.readinessProbe.timeoutSeconds Number of seconds after which the probe times out.
baserow-celery-worker:
  image:
    repository: backend
  args:
    - celery-worker
  service:
    create: false
  livenessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - /baserow/backend/docker/docker-entrypoint.sh celery-worker-healthcheck
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 10

  readinessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - /baserow/backend/docker/docker-entrypoint.sh celery-worker-healthcheck
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 10

## @section Baserow Celery Flower Configuration
## Configuration for the Celery Flower monitoring tool that provides a web-based interface for monitoring Celery workers.
## @param baserow-celery-flower.enabled Set to true to enable the Celery Flower monitoring tool.
## @param baserow-celery-flower.image.repository Docker image repository for the Celery Flower monitoring tool.
## @param baserow-celery-flower.args Arguments passed to the Celery Flower monitoring tool.
baserow-celery-flower:
  enabled: false
  image:
    repository: backend
  args:
    - celery-flower

## @section Ingress Configuration
## Configuration for the Ingress resource
## @param ingress.enabled Enable the Ingress resource
## @param ingress.annotations.kubernetes.io/ingress.class Ingress class annotation
## @param ingress.tls TLS configuration for the Ingress resource
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: caddy
  tls: []

## @section Redis Configuration
## Configuration for the Redis database
## @param redis.enabled Enable the Redis database
## @param redis.architecture The Redis architecture
## @param redis.auth.enabled Enable Redis authentication
## @param redis.auth.password The password for the Redis database
## @param redis.auth.existingSecret The name of an existing secret containing the database password
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    existingSecret: ""
    password: baserow

## @section PostgreSQL Configuration
## Configuration for the PostgreSQL database
## @param postgresql.enabled Enable the PostgreSQL database
## @param postgresql.auth.database The name of the database
## @param postgresql.auth.existingSecret The name of an existing secret containing the database password
## @param postgresql.auth.password The password for the database
## @param postgresql.auth.username The username for the database
postgresql:
  enabled: true
  auth:
    database: baserow
    existingSecret: ""
    password: baserow
    username: baserow

## @section Minio Configuration
## Configuration for the Minio object storage service
## @param minio.enabled Enable the Minio object storage service
## @param minio.networkPolicy.enabled Enable the Minio network policy
## @param minio.disableWebUI Disable the Minio web UI
## @param minio.provisioning.enabled Enable the Minio provisioning service
## @param minio.provisioning.buckets[0].name Name of the bucket to create
## @param minio.provisioning.extraCommands List of extra commands to run after provisioning
minio:
  enabled: true
  networkPolicy:
    enabled: false
  disableWebUI: true

  provisioning:
    enabled: true
    buckets:
      - name: baserow
    extraCommands: mc anonymous set download provisioning/baserow

## @section Caddy Configuration
## Configuration for the Caddy ingress controller
## @param caddy.enabled Enable the Caddy ingress controller
## @param caddy.ingressController.className Ingress class name which caddy will look for on ingress annotations.
## @param caddy.ingressController.config.email Email address to use for Let's Encrypt certificates
## @param caddy.ingressController.config.proxyProtocol Enable the PROXY protocol
## @param caddy.ingressController.config.experimentalSmartSort Enable experimental smart sorting
## @param caddy.ingressController.config.onDemandTLS Enable on-demand TLS
## @param caddy.ingressController.config.onDemandAsk URL to check for on-demand TLS
## @param caddy.loadBalancer.externalTrafficPolicy External traffic policy for the load balancer
## @param caddy.loadBalancer.annotations Annotations for the load balancer
caddy:
  enabled: false
  ingressController:
    className: caddy
    config:
      email: "my@email.com"
      proxyProtocol: true
      experimentalSmartSort: false
      onDemandTLS: true
      onDemandAsk: http://:9765/healthz
  loadBalancer:
    externalTrafficPolicy: "Local"
    annotations: {}
